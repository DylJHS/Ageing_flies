yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
dds
dds$age_cat
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
relevel(dds$age_cat, ref = "young")
dds$age_cat
level(dds$age_cat)
levels(dds$age_cat)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
relevel(dds$age_cat, ref = "young")
levels(dds$age_cat)
str(meta_data)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
levels(dds$age_cat)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds)
View(res_yng_mid)
res_yng_mid
res_yng_mid
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 5
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds)
summary_yng_mid <- summary(res_yng_mid)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds)
summary_yng_mid <- summary(res_yng_mid)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds, alpha = 0.05)
summary_yng_mid <- summary(res_yng_mid)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds, alpha = 0.5)
summary_yng_mid <- summary(res_yng_mid)
#Refine the counts dataset
yng_mid_df <- full_expression %>%
filter((age_cat == "young") |
(age_cat == "mid")) %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
yng_mid_meta <- meta_data %>%
filter(rownames(meta_data) %in% colnames(yng_mid_df))%>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(yng_mid_df) %in% rownames(yng_mid_meta))
all(colnames(yng_mid_df) == rownames(yng_mid_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = yng_mid_df,
colData = yng_mid_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
res_yng_mid <- results(dds, alpha = 0.1)
summary_yng_mid <- summary(res_yng_mid)
#Refine the counts dataset
count_data <- full_expression %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
count_meta <- meta_data %>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(count_data) %in% rownames(count_meta))
all(colnames(count_data) == rownames(count_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = count_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# # Run the DESeq
# dds <- DESeq(dds)
# res_yng_mid <- results(dds, alpha = 0.1)
# summary_yng_mid <- summary(res_yng_mid)
View(count_data)
View(count_meta)
levels(dds)
levels(dds$age_cat)
resultsNames(dds)
#Refine the counts dataset
count_data <- full_expression %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
count_meta <- meta_data %>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(count_data) %in% rownames(count_meta))
all(colnames(count_data) == rownames(count_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = count_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
# res_yng_mid <- results(dds, alpha = 0.1)
# summary_yng_mid <- summary(res_yng_mid)
resultsNames(dds)
#Refine the counts dataset
count_data <- full_expression %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
count_meta <- meta_data %>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(count_data) %in% rownames(count_meta))
all(colnames(count_data) == rownames(count_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = count_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
yng_mid_res <- results(dds,
contrast = list("age_cat_mid_vs_young"))
yng_mid_summary <- summary(yng_mid_res)
resultsNames(dds)
#Refine the counts dataset
count_data <- full_expression %>%
select(-c("track", "age_cat")) %>%
pivot_wider(
names_from = sample,
values_from = count
) %>%
column_to_rownames("ID_REF")
#Reconfigure the metdadata
count_meta <- meta_data %>%
mutate(age_cat = droplevels(as.factor(age_cat)))
# Check the formatting of the data is correct
all(colnames(count_data) %in% rownames(count_meta))
all(colnames(count_data) == rownames(count_meta))
#Create the Deseq obj
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = count_meta,
design = ~ age_cat)
#Filter low gene count (less than 5 across all samples)
kept <- rowSums(counts(dds)) >= 2
dds <- dds[kept,]
#Set the levels
dds$age_cat <- relevel(dds$age_cat, ref = "young")
# Run the DESeq
dds <- DESeq(dds)
#Get the Results for each group
#young-mid
yng_mid_res <- results(dds,
contrast = list("age_cat_mid_vs_young"))
yng_mid_summary <- summary(yng_mid_res)
#young-old
yng_old_res <- results(dds,
contrast = list("age_cat_old_vs_young"))
yng_old_summary <- summary(yng_old_res)
#young-geriatric
yng_ger_res <- results(dds,
contrast = list("age_cat_geriatric_vs_young"))
yng_ger_summary <- summary(yng_ger_res)
View(yng_old_res)
yng_old_res
yng_mid_res_df <- yng_mid_res %>%
as.data.frame()
View(yng_mid_res_df)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
filter(
is.na(padj)
)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
filter(padj <= 0.1
) %>%
select(c("log2FoldChange", "padj"))
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
select(c("log2FoldChange", "padj"))
View(meta_data)
View(expression_list)
View(full_expression)
View(tracks_res)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
select(c("log2FoldChange", "padj")) %>%
mutate(track = tracks_res$name[match(rownames(.), tracks_res$gene_id)])
install.packages("EnhancedVolcano")
library(dplyr)
library(rtracklayer)
library(tidyverse)
library(fuzzyjoin)
library(readr)
library(ggplot2)
library(factoextra)
library(FactoMineR)
library(DESeq2)
library(EnhancedVolcano)
BiocManager::install('EnhancedVolcano')
library(dplyr)
library(rtracklayer)
library(tidyverse)
library(fuzzyjoin)
library(readr)
library(ggplot2)
library(factoextra)
library(FactoMineR)
library(DESeq2)
library(EnhancedVolcano)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
select(c("log2FoldChange", "padj")) %>%
mutate(track = tracks_res$name[match(rownames(.), tracks_res$gene_id)])
yng_mid_plt <- EnhancedVolcano(yng_mid_res_df,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue'
)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
select(c("log2FoldChange", "padj")) %>%
mutate(track = tracks_res$name[match(rownames(.), tracks_res$gene_id)])
yng_mid_plt <- EnhancedVolcano(yng_mid_res_df,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj'
)
yng_mid_res_df <- yng_mid_res %>%
as.data.frame() %>%
select(c("log2FoldChange", "padj")) %>%
mutate(track = tracks_res$name[match(rownames(.), tracks_res$gene_id)])
yng_mid_plt <- EnhancedVolcano(yng_mid_res_df,
lab = rownames(yng_mid_res_df),
x = 'log2FoldChange',
y = 'padj'
)
yng_mid_plt
